<meta name="viewport" content="width=device-width, initial-scale=1">
<style>
* {box-sizing: border-box}
body {font-family: "Lato", sans-serif;}

/* Style the tab */
.tab {
  float: left;
  border: 1px solid #ccc;
  background-color: #f1f1f1;
  width: 30%;
  height: 500px;
  overflow: auto;
}

/* Style the buttons inside the tab */
.tab button {
  display: block;
  background-color: inherit;
  color: black;
  padding: 22px 16px;
  width: 100%;
  border: none;
  outline: none;
  text-align: left;
  cursor: pointer;
  transition: 0.3s;
  font-size: 17px;
}

/* Change background color of buttons on hover */
.tab button:hover {
  background-color: #ddd;
}

/* Create an active/current "tab button" class */
.tab button.active {
  background-color: #ccc;
}

/* Style the tab content */
.tabcontent {
  float: left;
  padding: 0px 12px;
  border: 1px solid #ccc;
  width: 70%;
  border-left: none;
  height: 500px;
  overflow: auto;

}

.input_form{
    position: absolute;
    position: sticky;
    bottom: 50;
    top: 430px;;
}

.input_mess{
    float: right;
    width: 50%;
    height: 50px;
    margin-top: auto;
}
.send_button{
    margin-top: auto;
    float: right;
    height: 50px;
}

hr.solid {
  border-top: 3px solid #bbb;
}

.container {
  border: 2px solid #dedede;
  background-color: #f1f1f1;
  border-radius: 5px;
  padding: 10px;
  margin: 10px 0;
}

.darker {
  border-color: #ccc;
  background-color: #ddd;
}

.container::after {
  content: "";
  clear: both;
  display: table;
}

.msger-inputarea {
  display: flex;
  padding: 10px;
  border-top: var(--border);
  background: #eee;
}
.msger-inputarea * {
  padding: 10px;
  border: none;
  border-radius: 3px;
  font-size: 1em;
}
.msger-input {
  flex: 1;
  background: #ddd;
}
.msger-send-btn {
  margin-left: 10px;
  background: rgb(0, 196, 65);
  color: #fff;
  font-weight: bold;
  cursor: pointer;
  transition: background 0.23s;
}
.msger-send-btn:hover {
  background: rgb(0, 180, 50);
}

</style>
<html>
    <body onload="checkLogin()">
        <h1>COMMAND</h1>
        <%- include('./header')%>
        <div class="tab" id='hist_tab'>
            <!--button class="tablinks" >Chat History</button-->
          </div>
          <div id='mess_container' class="tabcontent">
              <div id="message_bubble">
                <h3>Message</h3>
                <!--p>Chat Content</p-->
              </div>
            
          </div>
          <div class="msger-inputarea">  
            <input id='inputMess'  class="msger-input" placeholder="Input Message Here"/>
            <button onclick="sendMess()" id="button_send_mess" class="msger-send-btn">SEND</button>
        </div>
    </body>
</html>
<script type="text/javascript" src="./socket.io.min.js"></script>
<script type="text/javascript" src="./jquery-3.6.0.js"></script>
<script>
    const END_POINT = 'http://192.168.1.12:8082';
    var socket=io();
    
    const left_tab = document.getElementById('hist_tab');
    const message_zone = document.getElementById('message_bubble');
    const messContent = document.getElementById('inputMess');
    const messContainer = document.getElementById('mess_container');

    var myID_json = sessionStorage.getItem('login_data');
        var myID = JSON.parse(myID_json)['id'];
        var my_name = JSON.parse(myID_json)['my_username'];

    socket.on(myID, function(data){
        console.log(data);
        var current_partner = sessionStorage.getItem('current_partner_id');
        if(data.sender == current_partner)
        {
            var mess_block = `
                        <div class="container">
                            <h3 style="color:red;">${data.sender_name}</h3>
                            <p style="color:red;">${data.message}</p>
                        </div>`;
            message_zone.insertAdjacentHTML("beforeend", mess_block);
            messContainer.scrollTop = messContainer.scrollHeight;
        }
        else if(data.sender != current_partner)
        {   
            var flag =0;
            for(var k in response_init)
            {
                if(data.sender==response_init[k]['userID'])
                {
                    flag=1;
                }
            }
            if(flag==0)
            {
                var tab_partner_el = 
                `
                    <button class="tablinks" onclick=choosePartner(this.id) 
                    id="${data.sender}">${data.sender_name}</button>
                    <hr class="solid">
                `
                left_tab.insertAdjacentHTML("beforeend", tab_partner_el);
            }
            
        }
    })
    messContent.addEventListener('keyup', function(event){
        if(event.keyCode===13)
        {
            document.getElementById('button_send_mess').click();
        } 
    })

    function checkLogin(){
       var check = sessionStorage.getItem('login_data');
       sessionStorage.removeItem('current_partner_id');
    
       console.log(response_init);
       var check_json = JSON.parse(check);
       if(check_json ==null || check_json.isLogin != true)
       {
           window.location.href=END_POINT;
       }
       else
       {
            fetchData();
       }
    }
    var response_init;
    async function fetchData(){
        const options = {
            method: 'POST',
            body: JSON.stringify({'id': myID}),
            headers: {
                'Content-Type': 'application/json'
            }
        }
        var response_init_load = await fetch(END_POINT + "/load_chat_history", options);
        response_init = await response_init_load.json(); //console.log('response_init', response_init);
        for(var i in response_init)
        {
            console.log(response_init[i]);
            var tab_partner_el = 
            `
                <button class="tablinks" onclick=choosePartner(this.id) 
                id="${response_init[i].userID}">${response_init[i].username}</button>
                <hr class="solid">
            `
            left_tab.insertAdjacentHTML("beforeend", tab_partner_el);
        }
    }
    async function getBlockByID(id){
        //code call API get to /chat_peer
        var block;
        return(block);
    }
    async function choosePartnet_2(id){
        sessionStorage.setItem('current_partner_id', id);

        //callAPI(id)
        var block = await getBlockByID(id); //API call result
        var username;
        for(var k in response_init)
        {
            if(response_init[k].userID==id)
            {
                username=response_init[k].username;
            }
        }
        for(var i in block)
        {
            var mess_block;
            if(block[i].sender==id)
            {
                mess_block = `
                        <div class="container">
                            <h3 style="color:red;">${username}</h3>
                            <p style="color:red;">${block[i].content}</p>
                        </div>`
            }
            else if(block[i].sender != id)
            {
                mess_block = `
                        <div class="container darker">
                            <h3>${my_name}</h3>
                            <p>${block[i].content}</p>
                        </div>`
            }
            message_zone.insertAdjacentHTML("beforeend", mess_block);
        }
    }

    function choosePartner(id){
        sessionStorage.setItem('current_partner_id', id);
        message_zone.innerHTML=``;
        
        for(var i in response_init)
        {
            if(id==response_init[i].userID)
            {
                var block = response_init[i].message_block
                for(var j in block)
                {
                    var mess_block;
                    if(block[j].sender == response_init[i].userID)
                    {
                        mess_block = `
                        <div class="container">
                            <h3 style="color:red;">${response_init[i].username}</h3>
                            <p style="color:red;">${block[j].content}</p>
                        </div>`
                    }
                    else if(block[j].sender != response_init[i].userID)
                    {
                        mess_block = `
                        <div class="container darker">
                            <h3>${my_name}</h3>
                            <p>${block[j].content}</p>
                        </div>`
                    }
                    message_zone.insertAdjacentHTML("beforeend", mess_block);
                }
            }
        }
    }
    function sendMess()
    {
        var current_partner = sessionStorage.getItem('current_partner_id');
        if(current_partner != null)
        {
            mess_block = `
                        <div class="container darker">
                            <h3>${my_name}</h3>
                            <p>${messContent.value}</p>
                        </div>`;
            message_zone.insertAdjacentHTML("beforeend", mess_block);
            messContainer.scrollTop = messContainer.scrollHeight;
            socket.emit("sendMess", {'sender': myID, 'sender_name': my_name,
             'receiver': current_partner, 'message': messContent.value});
        }    
    }
</script>